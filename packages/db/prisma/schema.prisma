// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role?
    accounts      Account[]
    sessions      Session[]
    business      Business?
    reservations  Reservation[]
    notifications Notification[]
}
model Business {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  main_image_url String           @db.VarChar(500)
  user_id        String           @unique
  user           User             @relation(fields: [user_id], references: [id])
  phoneNumber    String?          @map("phone_number")
  email          String?
  created        DateTime?
  services       Service[]
  address        Address?
  business_hours Business_Hours[]
  reservations   Reservation[]
  businessImages BusinessImages[]
  socialMedia    SocialMedia?
}
model SocialMedia {
  id          Int      @id @default(autoincrement())
  business_id Int      @unique
  business    Business @relation(fields: [business_id], references: [id])
  facebook    String?
  instagram   String?
  tiktok      String?
  youtube     String?
}
model Business_Hours {
  id           Int       @id @default(autoincrement())
  business_id  Int?
  business     Business? @relation(fields: [business_id], references: [id], onDelete: Cascade)
  day          Int
  open_time    String
  closing_time String

  @@index([business_id])
}
model Address {
  id            Int      @id @default(autoincrement())
  country       String
  city          String
  street_name   String
  street_number Int
  postal_code   String
  coordinates   String?
  business_id   Int      @unique
  business      Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

model Service {
  id             Int           @id @unique @default(autoincrement())
  service_name   String
  description    String
  cost           Decimal
  session_length String
  business_id    Int
  business       Business      @relation(fields: [business_id], references: [id], onDelete: Cascade)
  ratings        Rating?
  category_id    Int
  category       Category?     @relation(fields: [category_id], references: [id], onDelete: Cascade)
  Reservation    Reservation[]

  @@index([category_id])
  @@index([business_id])
}
model BusinessImages {
  id          Int      @id @default(autoincrement())
  business_id Int
  business    Business @relation(fields: [business_id], references: [id])
  image_url   String

  @@index([business_id])
}
model Category {
  id       Int       @id @unique @default(autoincrement())
  created  DateTime?
  name     String
  services Service[]
}

model Rating {
  id            Int        @id @default(autoincrement())
  created       DateTime
  description   String
  service_id    Int        @unique
  service       Service    @relation(fields: [service_id], references: [id])
  rating_type  Rating_Type
}
model Reservation {
  id                 Int               @id @default(autoincrement())
  status             ReservationStatus
  created            DateTime
  modified           DateTime?
  date               DateTime
  reservationEndDate DateTime          @map("reservation_end_date")
  description        String?
  time               String
  User               User              @relation(fields: [userId], references: [id])
  userId             String
  Business           Business          @relation(fields: [businessId], references: [id])
  businessId         Int
  Service            Service           @relation(fields: [serviceId], references: [id])
  serviceId          Int
  colorTag           String?           @map("color_tag")

  @@index([userId])
  @@index([businessId])
  @@index([serviceId])
}
model Notification {
  id         Int      @id @default(autoincrement())
  user_id String      @unique
  user    User        @relation(fields: [user_id], references: [id])
  isRead  Boolean
  message String
  type    Notification_Type
  timestamp DateTime
}
enum Notification_Type {
  NEWS
  MESSAGE
  SPECIAL_OFFER
  RESERVATION_UPDATE
}
enum Role {
  ADMIN
  BUSINESS_OWNER
  BUSINESS_ADMIN
  CLIENT
}

enum LoginWith {
  FACEBOOK
  GOOGLE
  APPLE
  TRADITIONAL
}

enum Status {
  ONLINE
  OFFLINE
  AWAY
}

enum Rating_Type {
  UP
  DOWN
}
enum ReservationStatus {
  COMPLETED
  ACCEPTED
  PENDING
  CANCELLED
}

model Advertisement {
  id          Int      @id @default(autoincrement())
  image_url   String

}
